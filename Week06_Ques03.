#include<bits/stdc++.h>
using namespace std;
const int N=1e5+10;
vector<int> v[N];
vector<bool>k(N,false);
bool isloop=false;
vector<int>p[N];
void DFS(int j)
{
    if(!k[j])
    {
        
        k[j]=true;
        
        for(auto x:v[j])
        { 
            p[x].push_back(j);
            for(auto i:p[j])
            {   
                if(i!=x)
                {
                if(k[x])
                {
                isloop=isloop|true;
                } 
                }
                else
               {
                   isloop=isloop|false;
               }
            }
            DFS(x);
        }
   }
   else
   {
       return;
   }
}
int main()
{
    int n,m;
    //number of edges and the number of vertex in the graph.
    cin>>n>>m;
    int v1,v2;
    for(int i=0;i<m;i++)
    {
        cin>>v1>>v2;
        v[v1].push_back(v2);
        v[v2].push_back(v1);
    }
    int ct=0;
    for(int j=1;j<=n;j++)
    {
        if(k[j]==true)continue;
        DFS(j);
        ct++;
    }
    cout<<ct;
    DFS(1);
    if(isloop)
    {
        cout<<"\n Yes:::::";
    }
    else
    {
        cout<<"\n No::::::";
    }
    return 0;
}
