#include<bits/stdc++.h>
using namespace std;
const int N=1e5+10;
typedef vector<pair<int,pair<int,int> > >   vii;
int parent[N],sz[N];
void make(int v){
    parent[v]=v;
    sz[v]=1;
}
int find(int v)
{
    if(parent[v]==v)
    {
        return parent[v];
    }
    return parent[v]=find(parent[v]);
}
void Union(int a,int b)
{
    a=find(a);
    b=find(b);
    if(a!=b)
    {
        if(sz[a]<sz[b])
        swap(a,b);
     parent[b]=parent[a];
     sz[a]+=sz[b];
    }
}
int main()
{
    vii edges;
    int w,x,y;
    int n,m;
    cout<<"\n Enter the number of the vertices and edges in the graph::";
    cin>>n>>m;
    for(int i=0;i<m;i++)
    {
        cin>>x>>y;
        cin>>w;
        edges.push_back(make_pair(w,make_pair(x,y)));
    }
    sort(edges.begin(),edges.end());
    for(int i=1;i<=n;i++)
    {
        make(i);
    }
    int total_cost=0;
    for(auto &edge:edges){
        int wt=edge.first;
        int u=edge.second.first;
        int v=edge.second.second;
        if(find(u)==find(v))continue;
        Union(u,v);
        total_cost+=wt;
        cout<<u<<" "<<v<<endl;
    }
    cout<<total_cost<<endl;
return 0;
}
